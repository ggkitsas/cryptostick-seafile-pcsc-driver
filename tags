!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APDU_ALLOCATE_FLAG	apdu.h	38;"	d
APDU_ALLOCATE_FLAG_DATA	apdu.h	39;"	d
APDU_ALLOCATE_FLAG_RESP	apdu.h	40;"	d
APDU_CASE_1	apdu.h	6;"	d
APDU_CASE_2	apdu.h	16;"	d
APDU_CASE_2_EXT	apdu.h	12;"	d
APDU_CASE_2_SHORT	apdu.h	7;"	d
APDU_CASE_3	apdu.h	17;"	d
APDU_CASE_3_EXT	apdu.h	13;"	d
APDU_CASE_3_SHORT	apdu.h	8;"	d
APDU_CASE_4	apdu.h	18;"	d
APDU_CASE_4_EXT	apdu.h	14;"	d
APDU_CASE_4_SHORT	apdu.h	9;"	d
APDU_CASE_NONE	apdu.h	5;"	d
APDU_EXT	apdu.h	11;"	d
APDU_FLAGS_CHAINING	apdu.h	20;"	d
APDU_FLAGS_NO_GET_RESP	apdu.h	22;"	d
APDU_FLAGS_NO_RETRY_WL	apdu.h	26;"	d
APDU_H	apdu.h	2;"	d
APDU_SHORT_MASK	apdu.h	10;"	d
ASN1_H	asn1.h	2;"	d
CARD_CAP_APDU_EXT	card.h	36;"	d
CARD_CAP_ONLY_RAW_HASH	card.h	46;"	d
CARD_CAP_ONLY_RAW_HASH_STRIPPED	card.h	47;"	d
CARD_CAP_RNG	card.h	39;"	d
CARD_CAP_USE_FCI_AC	card.h	43;"	d
CARD_FLAG_RNG	card.h	26;"	d
CARD_FLAG_VENDOR_MASK	card.h	23;"	d
CARD_H	card.h	2;"	d
CARD_STATE_ACTIVATED	openpgp.h	/^    CARD_STATE_ACTIVATED      = 0x05$/;"	e	enum:_card_state
CARD_STATE_INITIALIZATION	openpgp.h	/^    CARD_STATE_INITIALIZATION = 0x03,$/;"	e	enum:_card_state
CARD_STATE_UNKNOWN	openpgp.h	/^    CARD_STATE_UNKNOWN        = 0x00,$/;"	e	enum:_card_state
CC	Makefile	/^CC=g++$/;"	m
CFLAGS	Makefile	/^CFLAGS=$/;"	m
COMMON_DEPS	Makefile	/^COMMON_DEPS= errors.c common.c apdu.c iso7816.c openpgp.c card.c pcsc-wrapper.c$/;"	m
COMMON_H	common.h	2;"	d
CONSTRUCTED	openpgp.h	/^    CONSTRUCTED = SC_FILE_TYPE_DF$/;"	e	enum:_type
DEBUG	common.h	38;"	d
DI	common.h	/^        u8 FI, DI;$/;"	m	struct:sc_reader::_atr_info
DIM	errors.c	25;"	d	file:
DRVDATA	card.h	49;"	d
Di	common.h	/^        int Fi, f, Di, N;     $/;"	m	struct:sc_reader::_atr_info
EXT_CAP_ALG_ATTR_CHANGEABLE	openpgp.h	/^    EXT_CAP_ALG_ATTR_CHANGEABLE = 0x0004,$/;"	e	enum:_ext_caps
EXT_CAP_APDU_EXT	openpgp.h	/^    EXT_CAP_APDU_EXT            = 0x2000$/;"	e	enum:_ext_caps
EXT_CAP_C4_CHANGEABLE	openpgp.h	/^    EXT_CAP_C4_CHANGEABLE       = 0x0010,$/;"	e	enum:_ext_caps
EXT_CAP_CHAINING	openpgp.h	/^    EXT_CAP_CHAINING            = 0x1000,$/;"	e	enum:_ext_caps
EXT_CAP_GET_CHALLENGE	openpgp.h	/^    EXT_CAP_GET_CHALLENGE       = 0x0040,$/;"	e	enum:_ext_caps
EXT_CAP_KEY_IMPORT	openpgp.h	/^    EXT_CAP_KEY_IMPORT          = 0x0020,$/;"	e	enum:_ext_caps
EXT_CAP_PRIVATE_DO	openpgp.h	/^    EXT_CAP_PRIVATE_DO          = 0x0008,$/;"	e	enum:_ext_caps
EXT_CAP_SM	openpgp.h	/^    EXT_CAP_SM                  = 0x0080,$/;"	e	enum:_ext_caps
FI	common.h	/^        u8 FI, DI;$/;"	m	struct:sc_reader::_atr_info
FUNC_CALLED	common.h	41;"	d
FUNC_CALLED	common.h	44;"	d
Fi	common.h	/^        int Fi, f, Di, N;     $/;"	m	struct:sc_reader::_atr_info
GET_PRIV_DATA	pcsc-wrapper.h	12;"	d
IASECC_TAG_II_IO_BUFFER_SIZES	iso7816.h	38;"	d
INC	Makefile	/^INC=-I"\/home\/cyc0\/Projects\/smartcards\/pcsc-lite-1.8.11\/build\/include\/PCSC" -I"$(shell "pwd")"$/;"	m
ISO7816_FILE_TYPE_DF	iso7816.h	8;"	d
ISO7816_FILE_TYPE_TRANSPARENT_EF	iso7816.h	7;"	d
ISO7816_H	iso7816.h	2;"	d
ISO7816_II_CATEGORY_NOT_TLV	iso7816.h	24;"	d
ISO7816_II_CATEGORY_TLV	iso7816.h	23;"	d
ISO7816_TAG_FCI	iso7816.h	10;"	d
ISO7816_TAG_FCP	iso7816.h	12;"	d
ISO7816_TAG_FCP_ACLS	iso7816.h	19;"	d
ISO7816_TAG_FCP_DF_NAME	iso7816.h	17;"	d
ISO7816_TAG_FCP_FID	iso7816.h	16;"	d
ISO7816_TAG_FCP_LCS	iso7816.h	20;"	d
ISO7816_TAG_FCP_PROP_INFO	iso7816.h	18;"	d
ISO7816_TAG_FCP_SIZE	iso7816.h	13;"	d
ISO7816_TAG_FCP_SIZE_FULL	iso7816.h	14;"	d
ISO7816_TAG_FCP_TYPE	iso7816.h	15;"	d
ISO7816_TAG_II_AID	iso7816.h	31;"	d
ISO7816_TAG_II_ALLOCATION_SCHEME	iso7816.h	32;"	d
ISO7816_TAG_II_CARD_CAPABILITIES	iso7816.h	30;"	d
ISO7816_TAG_II_CARD_ISSUER_DATA	iso7816.h	28;"	d
ISO7816_TAG_II_CARD_SERVICE	iso7816.h	26;"	d
ISO7816_TAG_II_INITIAL_ACCESS_DATA	iso7816.h	27;"	d
ISO7816_TAG_II_PRE_ISSUING	iso7816.h	29;"	d
ISO7816_TAG_II_STATUS_LCS	iso7816.h	33;"	d
ISO7816_TAG_II_STATUS_LCS_SW	iso7816.h	35;"	d
ISO7816_TAG_II_STATUS_SW	iso7816.h	34;"	d
LDFLAGS	Makefile	/^LDFLAGS=-lpcsclite #-lssl$/;"	m
LIB	Makefile	/^LIB=-L"\/home\/cyc0\/Projects\/smartcards\/pcsc-lite-1.8.11\/build\/lib"$/;"	m
LOG_FUNC_RETURN	common.h	36;"	d
LOG_TEST_RET	common.h	21;"	d
N	common.h	/^        int Fi, f, Di, N;     $/;"	m	struct:sc_reader::_atr_info
OPENPGP_CARD_1_0	openpgp.h	/^    OPENPGP_CARD_1_0 = 0x0100,$/;"	e	enum:_version
OPENPGP_CARD_1_1	openpgp.h	/^    OPENPGP_CARD_1_1 = 0x0101,$/;"	e	enum:_version
OPENPGP_CARD_2_0	openpgp.h	/^    OPENPGP_CARD_2_0 = 0x0200$/;"	e	enum:_version
OPENPGP_H	openpgp.h	2;"	d
PCSC_WRAPPER_H	pcsc-wrapper.h	2;"	d
SC_ALGORITHM_ONBOARD_KEY_GEN	common.h	142;"	d
SC_ALGORITHM_RSA	common.h	139;"	d
SC_ALGORITHM_RSA_HASH_NONE	common.h	143;"	d
SC_ALGORITHM_RSA_PAD_PKCS1	common.h	141;"	d
SC_ALGORITHM_RSA_RAW	common.h	140;"	d
SC_ASN1_ALGORITHM_ID	asn1.h	46;"	d
SC_ASN1_ALLOC	asn1.h	18;"	d
SC_ASN1_APP	asn1.h	9;"	d
SC_ASN1_BIT_FIELD	asn1.h	40;"	d
SC_ASN1_BIT_STRING	asn1.h	24;"	d
SC_ASN1_BIT_STRING_NI	asn1.h	25;"	d
SC_ASN1_BOOLEAN	asn1.h	22;"	d
SC_ASN1_CALLBACK	asn1.h	50;"	d
SC_ASN1_CHOICE	asn1.h	39;"	d
SC_ASN1_CLASS_MASK	asn1.h	7;"	d
SC_ASN1_CONS	asn1.h	12;"	d
SC_ASN1_CTX	asn1.h	10;"	d
SC_ASN1_EMPTY_ALLOWED	asn1.h	20;"	d
SC_ASN1_ENUMERATED	asn1.h	29;"	d
SC_ASN1_GENERALIZEDTIME	asn1.h	35;"	d
SC_ASN1_INTEGER	asn1.h	23;"	d
SC_ASN1_NULL	asn1.h	27;"	d
SC_ASN1_OBJECT	asn1.h	28;"	d
SC_ASN1_OCTET_STRING	asn1.h	26;"	d
SC_ASN1_OPTIONAL	asn1.h	17;"	d
SC_ASN1_PATH	asn1.h	43;"	d
SC_ASN1_PKCS15_ID	asn1.h	44;"	d
SC_ASN1_PKCS15_OBJECT	asn1.h	45;"	d
SC_ASN1_PRESENT	asn1.h	16;"	d
SC_ASN1_PRINTABLESTRING	asn1.h	33;"	d
SC_ASN1_PRV	asn1.h	11;"	d
SC_ASN1_SEQUENCE	asn1.h	31;"	d
SC_ASN1_SET	asn1.h	32;"	d
SC_ASN1_SE_INFO	asn1.h	47;"	d
SC_ASN1_STRUCT	asn1.h	38;"	d
SC_ASN1_TAG_APPLICATION	asn1.h	54;"	d
SC_ASN1_TAG_BIT_STRING	asn1.h	64;"	d
SC_ASN1_TAG_BMPSTRING	asn1.h	88;"	d
SC_ASN1_TAG_BOOLEAN	asn1.h	62;"	d
SC_ASN1_TAG_CLASS	asn1.h	52;"	d
SC_ASN1_TAG_CONSTRUCTED	asn1.h	58;"	d
SC_ASN1_TAG_CONTEXT	asn1.h	55;"	d
SC_ASN1_TAG_ENUMERATED	asn1.h	71;"	d
SC_ASN1_TAG_EOC	asn1.h	61;"	d
SC_ASN1_TAG_EXTERNAL	asn1.h	69;"	d
SC_ASN1_TAG_GENERALIZEDTIME	asn1.h	82;"	d
SC_ASN1_TAG_GENERALSTRING	asn1.h	86;"	d
SC_ASN1_TAG_GRAPHICSTRING	asn1.h	83;"	d
SC_ASN1_TAG_IA5STRING	asn1.h	80;"	d
SC_ASN1_TAG_INTEGER	asn1.h	63;"	d
SC_ASN1_TAG_ISO64STRING	asn1.h	84;"	d
SC_ASN1_TAG_MASK	asn1.h	14;"	d
SC_ASN1_TAG_NULL	asn1.h	66;"	d
SC_ASN1_TAG_NUMERICSTRING	asn1.h	75;"	d
SC_ASN1_TAG_OBJECT	asn1.h	67;"	d
SC_ASN1_TAG_OBJECT_DESCRIPTOR	asn1.h	68;"	d
SC_ASN1_TAG_OCTET_STRING	asn1.h	65;"	d
SC_ASN1_TAG_PRIMITIVE	asn1.h	59;"	d
SC_ASN1_TAG_PRINTABLESTRING	asn1.h	76;"	d
SC_ASN1_TAG_PRIVATE	asn1.h	56;"	d
SC_ASN1_TAG_REAL	asn1.h	70;"	d
SC_ASN1_TAG_SEQUENCE	asn1.h	73;"	d
SC_ASN1_TAG_SET	asn1.h	74;"	d
SC_ASN1_TAG_T61STRING	asn1.h	77;"	d
SC_ASN1_TAG_TELETEXSTRING	asn1.h	78;"	d
SC_ASN1_TAG_UNIVERSAL	asn1.h	53;"	d
SC_ASN1_TAG_UNIVERSALSTRING	asn1.h	87;"	d
SC_ASN1_TAG_UTCTIME	asn1.h	81;"	d
SC_ASN1_TAG_UTF8STRING	asn1.h	72;"	d
SC_ASN1_TAG_VIDEOTEXSTRING	asn1.h	79;"	d
SC_ASN1_TAG_VISIBLESTRING	asn1.h	85;"	d
SC_ASN1_UNI	asn1.h	8;"	d
SC_ASN1_UNSIGNED	asn1.h	19;"	d
SC_ASN1_UTCTIME	asn1.h	34;"	d
SC_ASN1_UTF8STRING	asn1.h	30;"	d
SC_CARD_CAP_RNG	common.h	145;"	d
SC_CCID_PIN_ENCODING_ASCII	pcsc-wrapper.c	839;"	d	file:
SC_CCID_PIN_ENCODING_BCD	pcsc-wrapper.c	838;"	d	file:
SC_CCID_PIN_ENCODING_BIN	pcsc-wrapper.c	837;"	d	file:
SC_CCID_PIN_TIMEOUT	pcsc-wrapper.c	834;"	d	file:
SC_CCID_PIN_UNITS_BYTES	pcsc-wrapper.c	841;"	d	file:
SC_ERROR_ASN1_END_OF_CONTENTS	errors.h	84;"	d
SC_ERROR_ASN1_OBJECT_NOT_FOUND	errors.h	83;"	d
SC_ERROR_AUTH_METHOD_BLOCKED	errors.h	62;"	d
SC_ERROR_BUFFER_TOO_SMALL	errors.h	76;"	d
SC_ERROR_CANNOT_LOAD_KEY	errors.h	106;"	d
SC_ERROR_CANNOT_LOAD_MODULE	errors.h	95;"	d
SC_ERROR_CARD_CMD_FAILED	errors.h	50;"	d
SC_ERROR_CARD_NOT_PRESENT	errors.h	35;"	d
SC_ERROR_CARD_REMOVED	errors.h	36;"	d
SC_ERROR_CARD_RESET	errors.h	37;"	d
SC_ERROR_CARD_UNRESPONSIVE	errors.h	44;"	d
SC_ERROR_CLASS_NOT_SUPPORTED	errors.h	53;"	d
SC_ERROR_CORRUPTED_DATA	errors.h	68;"	d
SC_ERROR_DATA_OBJECT_NOT_FOUND	errors.h	66;"	d
SC_ERROR_DECRYPT_FAILED	errors.h	92;"	d
SC_ERROR_EVENT_TIMEOUT	errors.h	43;"	d
SC_ERROR_FILE_ALREADY_EXISTS	errors.h	65;"	d
SC_ERROR_FILE_END_REACHED	errors.h	69;"	d
SC_ERROR_FILE_NOT_FOUND	errors.h	51;"	d
SC_ERROR_FILE_TOO_SMALL	errors.h	110;"	d
SC_ERROR_INCOMPATIBLE_KEY	errors.h	103;"	d
SC_ERROR_INCONSISTENT_CONFIGURATION	errors.h	91;"	d
SC_ERROR_INCONSISTENT_PROFILE	errors.h	102;"	d
SC_ERROR_INCORRECT_PARAMETERS	errors.h	55;"	d
SC_ERROR_INS_NOT_SUPPORTED	errors.h	54;"	d
SC_ERROR_INTERNAL	errors.h	81;"	d
SC_ERROR_INVALID_ARGUMENTS	errors.h	73;"	d
SC_ERROR_INVALID_ASN1_OBJECT	errors.h	82;"	d
SC_ERROR_INVALID_CARD	errors.h	60;"	d
SC_ERROR_INVALID_DATA	errors.h	78;"	d
SC_ERROR_INVALID_PIN_LENGTH	errors.h	77;"	d
SC_ERROR_INVALID_PIN_REFERENCE	errors.h	109;"	d
SC_ERROR_KEYPAD_CANCELLED	errors.h	40;"	d
SC_ERROR_KEYPAD_MSG_TOO_LONG	errors.h	42;"	d
SC_ERROR_KEYPAD_PIN_MISMATCH	errors.h	41;"	d
SC_ERROR_KEYPAD_TIMEOUT	errors.h	39;"	d
SC_ERROR_MEMORY_FAILURE	errors.h	57;"	d
SC_ERROR_NON_UNIQUE_ID	errors.h	105;"	d
SC_ERROR_NOT_ALLOWED	errors.h	59;"	d
SC_ERROR_NOT_ENOUGH_MEMORY	errors.h	67;"	d
SC_ERROR_NOT_IMPLEMENTED	errors.h	97;"	d
SC_ERROR_NOT_SUPPORTED	errors.h	89;"	d
SC_ERROR_NO_CARD_SUPPORT	errors.h	58;"	d
SC_ERROR_NO_DEFAULT_KEY	errors.h	104;"	d
SC_ERROR_NO_READERS_FOUND	errors.h	32;"	d
SC_ERROR_OBJECT_NOT_FOUND	errors.h	88;"	d
SC_ERROR_OBJECT_NOT_VALID	errors.h	87;"	d
SC_ERROR_OFFSET_TOO_LARGE	errors.h	96;"	d
SC_ERROR_OUT_OF_MEMORY	errors.h	85;"	d
SC_ERROR_PASSPHRASE_REQUIRED	errors.h	90;"	d
SC_ERROR_PIN_CODE_INCORRECT	errors.h	64;"	d
SC_ERROR_PKCS15INIT	errors.h	100;"	d
SC_ERROR_PKCS15_APP_NOT_FOUND	errors.h	129;"	d
SC_ERROR_READER	errors.h	31;"	d
SC_ERROR_READER_DETACHED	errors.h	45;"	d
SC_ERROR_READER_LOCKED	errors.h	47;"	d
SC_ERROR_READER_REATTACHED	errors.h	46;"	d
SC_ERROR_RECORD_NOT_FOUND	errors.h	52;"	d
SC_ERROR_REF_DATA_NOT_USABLE	errors.h	70;"	d
SC_ERROR_SECURITY_STATUS_NOT_SATISFIED	errors.h	61;"	d
SC_ERROR_SM	errors.h	113;"	d
SC_ERROR_SM_AUTHENTICATION_FAILED	errors.h	119;"	d
SC_ERROR_SM_ENCRYPT_FAILED	errors.h	114;"	d
SC_ERROR_SM_IFD_DATA_MISSING	errors.h	122;"	d
SC_ERROR_SM_INVALID_CHECKSUM	errors.h	125;"	d
SC_ERROR_SM_INVALID_LEVEL	errors.h	115;"	d
SC_ERROR_SM_INVALID_SESSION_KEY	errors.h	117;"	d
SC_ERROR_SM_KEYSET_NOT_FOUND	errors.h	121;"	d
SC_ERROR_SM_NOT_APPLIED	errors.h	123;"	d
SC_ERROR_SM_NOT_INITIALIZED	errors.h	118;"	d
SC_ERROR_SM_NO_SESSION_KEYS	errors.h	116;"	d
SC_ERROR_SM_RAND_FAILED	errors.h	120;"	d
SC_ERROR_SM_SESSION_ALREADY_ACTIVE	errors.h	124;"	d
SC_ERROR_SYNTAX_ERROR	errors.h	101;"	d
SC_ERROR_TEMPLATE_NOT_FOUND	errors.h	108;"	d
SC_ERROR_TOO_MANY_OBJECTS	errors.h	86;"	d
SC_ERROR_TRANSMIT_FAILED	errors.h	38;"	d
SC_ERROR_UNKNOWN	errors.h	128;"	d
SC_ERROR_UNKNOWN_DATA_RECEIVED	errors.h	63;"	d
SC_ERROR_WRONG_CARD	errors.h	94;"	d
SC_ERROR_WRONG_LENGTH	errors.h	56;"	d
SC_ERROR_WRONG_PADDING	errors.h	93;"	d
SC_FILE_MAGIC	common.h	109;"	d
SC_FILE_STATUS_ACTIVATED	common.h	116;"	d
SC_FILE_STATUS_CREATION	common.h	118;"	d
SC_FILE_STATUS_INVALIDATED	common.h	117;"	d
SC_FILE_TYPE_BSO	common.h	114;"	d
SC_FILE_TYPE_DF	common.h	111;"	d
SC_FILE_TYPE_INTERNAL_EF	common.h	112;"	d
SC_FILE_TYPE_WORKING_EF	common.h	113;"	d
SC_FUNC_RETURN	common.h	24;"	d
SC_MAX_AC_OPS	common.h	252;"	d
SC_MAX_AID_SIZE	common.h	86;"	d
SC_MAX_AID_STRING_SIZE	common.h	87;"	d
SC_MAX_APDU_BUFFER_SIZE	common.h	82;"	d
SC_MAX_ATR_SIZE	common.h	85;"	d
SC_MAX_CARD_APPS	common.h	81;"	d
SC_MAX_CARD_DRIVERS	common.h	79;"	d
SC_MAX_CARD_DRIVER_SNAME_SIZE	common.h	80;"	d
SC_MAX_CRTS_IN_SE	common.h	93;"	d
SC_MAX_EXT_APDU_BUFFER_SIZE	common.h	83;"	d
SC_MAX_IIN_SIZE	common.h	88;"	d
SC_MAX_OBJECT_ID_OCTETS	common.h	89;"	d
SC_MAX_PATH_SIZE	common.h	90;"	d
SC_MAX_PATH_STRING_SIZE	common.h	91;"	d
SC_MAX_PIN_SIZE	common.h	84;"	d
SC_MAX_SDO_ACLS	common.h	92;"	d
SC_MAX_SERIALNR	common.h	213;"	d
SC_MAX_SE_NUM	common.h	94;"	d
SC_PATH_TYPE_DF_NAME	common.h	102;"	d
SC_PATH_TYPE_FILE_ID	common.h	101;"	d
SC_PATH_TYPE_FROM_CURRENT	common.h	106;"	d
SC_PATH_TYPE_PARENT	common.h	107;"	d
SC_PATH_TYPE_PATH	common.h	103;"	d
SC_PATH_TYPE_PATH_PROT	common.h	105;"	d
SC_PIN_CMD_CHANGE	common.h	126;"	d
SC_PIN_CMD_GET_INFO	common.h	128;"	d
SC_PIN_CMD_IMPLICIT_CHANGE	common.h	132;"	d
SC_PIN_CMD_NEED_PADDING	common.h	131;"	d
SC_PIN_CMD_UNBLOCK	common.h	127;"	d
SC_PIN_CMD_USE_PINPAD	common.h	130;"	d
SC_PIN_CMD_VERIFY	common.h	125;"	d
SC_PIN_ENCODING_ASCII	common.h	134;"	d
SC_PIN_ENCODING_BCD	common.h	135;"	d
SC_PIN_ENCODING_GLP	common.h	136;"	d
SC_PKCS15_MAX_ID_SIZE	common.h	99;"	d
SC_PKCS15_MAX_LABEL_SIZE	common.h	98;"	d
SC_PKCS15_MAX_PINS	common.h	97;"	d
SC_PKCS15_PIN_MAGIC	common.h	96;"	d
SC_PROTO_ANY	common.h	75;"	d
SC_PROTO_RAW	common.h	74;"	d
SC_PROTO_T0	common.h	72;"	d
SC_PROTO_T1	common.h	73;"	d
SC_READER_CAP_DISPLAY	common.h	64;"	d
SC_READER_CAP_PACE_DESTROY_CHANNEL	common.h	68;"	d
SC_READER_CAP_PACE_EID	common.h	66;"	d
SC_READER_CAP_PACE_ESIGN	common.h	67;"	d
SC_READER_CAP_PACE_GENERIC	common.h	69;"	d
SC_READER_CAP_PIN_PAD	common.h	65;"	d
SC_READER_CARD_CHANGED	common.h	58;"	d
SC_READER_CARD_EXCLUSIVE	common.h	60;"	d
SC_READER_CARD_INUSE	common.h	59;"	d
SC_READER_CARD_PRESENT	common.h	57;"	d
SC_READER_HAS_WAITING_AREA	common.h	61;"	d
SC_SUCCESS	errors.h	28;"	d
SC_TEST_RET	common.h	12;"	d
SCardBeginTransaction	pcsc-wrapper.h	/^    SCardBeginTransaction_t SCardBeginTransaction;$/;"	m	struct:pcsc_global_private_data
SCardBeginTransaction_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardBeginTransaction_t)(SCARDHANDLE hCard);$/;"	t
SCardCancel	pcsc-wrapper.h	/^    SCardCancel_t SCardCancel;$/;"	m	struct:pcsc_global_private_data
SCardCancel_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardCancel_t)(SCARDCONTEXT hContext);$/;"	t
SCardConnect	pcsc-wrapper.h	/^    SCardConnect_t SCardConnect;   $/;"	m	struct:pcsc_global_private_data
SCardConnect_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardConnect_t)(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode,$/;"	t
SCardControl	pcsc-wrapper.h	/^    SCardControl_t SCardControl;   $/;"	m	struct:pcsc_global_private_data
SCardControlOLD	pcsc-wrapper.h	/^    SCardControlOLD_t SCardControlOLD;$/;"	m	struct:pcsc_global_private_data
SCardControlOLD_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardControlOLD_t)(SCARDHANDLE hCard, LPCVOID pbSendBuffer, DWORD cbSendLength,$/;"	t
SCardControl_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardControl_t)(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID pbSendBuffer,$/;"	t
SCardDisconnect	pcsc-wrapper.h	/^    SCardDisconnect_t SCardDisconnect;$/;"	m	struct:pcsc_global_private_data
SCardDisconnect_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardDisconnect_t)(SCARDHANDLE hCard, DWORD dwDisposition);$/;"	t
SCardEndTransaction	pcsc-wrapper.h	/^    SCardEndTransaction_t SCardEndTransaction;$/;"	m	struct:pcsc_global_private_data
SCardEndTransaction_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardEndTransaction_t)(SCARDHANDLE hCard, DWORD dwDisposition);$/;"	t
SCardEstablishContext	pcsc-wrapper.h	/^    SCardEstablishContext_t SCardEstablishContext;$/;"	m	struct:pcsc_global_private_data
SCardEstablishContext_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardEstablishContext_t)(DWORD dwScope, LPCVOID pvReserved1,$/;"	t
SCardGetAttrib	pcsc-wrapper.h	/^    SCardGetAttrib_t SCardGetAttrib;                                                                                                                                                                                                   $/;"	m	struct:pcsc_global_private_data
SCardGetAttrib_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardGetAttrib_t)(SCARDHANDLE hCard, DWORD dwAttrId,\\$/;"	t
SCardGetStatusChange	pcsc-wrapper.h	/^    SCardGetStatusChange_t SCardGetStatusChange; $/;"	m	struct:pcsc_global_private_data
SCardGetStatusChange_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardGetStatusChange_t)(SCARDCONTEXT hContext, DWORD dwTimeout,$/;"	t
SCardListReaders	pcsc-wrapper.h	/^    SCardListReaders_t SCardListReaders;$/;"	m	struct:pcsc_global_private_data
SCardListReaders_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardListReaders_t)(SCARDCONTEXT hContext, LPCSTR mszGroups,$/;"	t
SCardReconnect	pcsc-wrapper.h	/^    SCardReconnect_t SCardReconnect;$/;"	m	struct:pcsc_global_private_data
SCardReconnect_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardReconnect_t)(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols,$/;"	t
SCardReleaseContext	pcsc-wrapper.h	/^    SCardReleaseContext_t SCardReleaseContext;$/;"	m	struct:pcsc_global_private_data
SCardReleaseContext_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardReleaseContext_t)(SCARDCONTEXT hContext);$/;"	t
SCardStatus	pcsc-wrapper.h	/^    SCardStatus_t SCardStatus;$/;"	m	struct:pcsc_global_private_data
SCardStatus_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardStatus_t)(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen,$/;"	t
SCardTransmit	pcsc-wrapper.h	/^    SCardTransmit_t SCardTransmit; $/;"	m	struct:pcsc_global_private_data
SCardTransmit_t	pcsc-wrapper.h	/^typedef LONG (PCSC_API *SCardTransmit_t)(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci,                                                                                                                                            $/;"	t
SIMPLE	openpgp.h	/^    SIMPLE      = SC_FILE_TYPE_WORKING_EF,$/;"	e	enum:_type
SWs	common.h	/^    unsigned int SWs;$/;"	m	struct:sc_card_error
_OPENSC_ERRORS_H	errors.h	22;"	d
_apdu_t	apdu.h	/^typedef struct _apdu_t {      $/;"	s
_atr_info	common.h	/^    struct _atr_info {$/;"	s	struct:sc_reader
_card_state	openpgp.h	/^enum _card_state {$/;"	g
_card_t	card.h	/^typedef struct _card_t {$/;"	s
_ec	common.h	/^        } _ec;$/;"	m	union:sc_algorithm_info::__anon1	typeref:struct:sc_algorithm_info::__anon1::sc_ec_info
_ext_caps	openpgp.h	/^enum _ext_caps {    \/* extended capabilities\/features *\/$/;"	g
_reader_list	pcsc-wrapper.h	/^typedef struct _reader_list {$/;"	s
_reader_list_node	pcsc-wrapper.h	/^typedef struct _reader_list_node {$/;"	s
_rsa	common.h	/^        } _rsa;$/;"	m	union:sc_algorithm_info::__anon1	typeref:struct:sc_algorithm_info::__anon1::sc_rsa_info
_sc_card_add_algorithm	openpgp.c	/^int _sc_card_add_algorithm(card_t *card, const sc_algorithm_info_t *info)$/;"	f
_sc_card_add_rsa_alg	openpgp.c	/^int _sc_card_add_rsa_alg(card_t *card, unsigned int key_length,$/;"	f
_sc_parse_atr	common.c	/^int _sc_parse_atr(sc_reader_t *reader)                                                                                                                                                                                                 $/;"	f
_type	openpgp.h	/^enum _type {        \/* DO type *\/$/;"	g
_version	openpgp.h	/^enum _version {     \/* 2-byte BCD-alike encoded version number *\/$/;"	g
access	openpgp.h	/^    enum _access    access;     \/* R\/W access levels for the DO *\/$/;"	m	struct:do_info	typeref:enum:do_info::_access
acl	common.h	/^    struct sc_acl_entry *acl[SC_MAX_AC_OPS]; \/* Access Control List *\/$/;"	m	struct:sc_file	typeref:struct:sc_file::sc_acl_entry
acls	common.h	/^    struct sc_acl_entry acls[SC_MAX_SDO_ACLS];$/;"	m	struct:sc_pin_cmd_pin	typeref:struct:sc_pin_cmd_pin::sc_acl_entry
active_protocol	common.h	/^    unsigned int supported_protocols, active_protocol;$/;"	m	struct:sc_reader
aid	common.h	/^    struct sc_aid aid;$/;"	m	struct:sc_path	typeref:struct:sc_path::sc_aid
algo	common.h	/^    unsigned algo;      \/* Algorithm ID *\/$/;"	m	struct:sc_crt
algorithm	common.h	/^    unsigned int algorithm;$/;"	m	struct:sc_algorithm_info
algorithm_count	card.h	/^    int algorithm_count;$/;"	m	struct:_card_t
algorithms	card.h	/^    struct sc_algorithm_info *algorithms; $/;"	m	struct:_card_t	typeref:struct:_card_t::sc_algorithm_info
allocation_flags	apdu.h	/^    unsigned allocation_flags;  \/* APDU allocation flags *\/$/;"	m	struct:_apdu_t
apdu	common.h	/^    apdu_t *apdu;       \/* APDU of the PIN command *\/$/;"	m	struct:sc_pin_cmd_data
apdu_get_octets	apdu.c	/^int apdu_get_octets(const apdu_t *apdu, u8 **buf,$/;"	f
apdu_t	apdu.h	/^} apdu_t;$/;"	t	typeref:struct:_apdu_t
arg	asn1.h	/^    void *arg;$/;"	m	struct:sc_asn1_entry
asn1_decode	asn1.c	/^int asn1_decode(struct sc_asn1_entry *asn1,$/;"	f
asn1_decode_entry	asn1.c	/^int asn1_decode_entry(struct sc_asn1_entry *entry,$/;"	f
asn1_decode_p15_object	asn1.c	/^int asn1_decode_p15_object(const u8 *in,$/;"	f
asn1_decode_path	asn1.c	/^int asn1_decode_path(const u8 *in, size_t len,$/;"	f
atr	card.h	/^    struct sc_atr atr;$/;"	m	struct:_card_t	typeref:struct:_card_t::sc_atr
atr	common.h	/^    struct sc_atr atr;$/;"	m	struct:sc_reader	typeref:struct:sc_reader::sc_atr
atr_info	common.h	/^    } atr_info;$/;"	m	struct:sc_reader	typeref:struct:sc_reader::_atr_info
bcd_version	openpgp.h	/^    enum _version       bcd_version;$/;"	m	struct:pgp_priv_data	typeref:enum:pgp_priv_data::_version
bebytes2ushort	common.c	/^unsigned short bebytes2ushort(const u8 *buf)$/;"	f
blob	openpgp.h	/^struct blob {$/;"	s
capabilities	common.h	/^    unsigned long flags, capabilities;$/;"	m	struct:sc_reader
caps	card.h	/^    unsigned long caps, flags;$/;"	m	struct:_card_t
card_init	card.c	/^int card_init(card_t *card)$/;"	f
card_t	card.h	/^} card_t;$/;"	t	typeref:struct:_card_t
check_apdu	apdu.c	/^int check_apdu(card_t *card, const apdu_t *apdu)$/;"	f
check_sw	apdu.c	/^int check_sw(card_t *card, unsigned int sw1, unsigned int sw2)$/;"	f
cla	apdu.h	/^    unsigned char cla, ins, p1, p2; \/* CLA, INS, P1 and P2 bytes *\/$/;"	m	struct:_apdu_t
cla	card.h	/^    int cla;$/;"	m	struct:_card_t
cmd	common.h	/^    unsigned int cmd;$/;"	m	struct:sc_pin_cmd_data
connect_exclusive	pcsc-wrapper.h	/^    int connect_exclusive;    $/;"	m	struct:pcsc_global_private_data
control	apdu.h	/^    unsigned char control;      \/* Set if APDU should go to the reader *\/$/;"	m	struct:_apdu_t
copy_asn1_entry	asn1.c	/^void copy_asn1_entry(const struct sc_asn1_entry *src,$/;"	f
count	common.h	/^    int count;$/;"	m	struct:sc_path
country	common.h	/^    unsigned country;               \/* country identifier *\/       $/;"	m	struct:sc_iin
crts	common.h	/^    struct sc_crt crts[SC_MAX_CRTS_IN_SE];$/;"	m	struct:sc_acl_entry	typeref:struct:sc_acl_entry::sc_crt
cse	apdu.h	/^    int cse;            \/* APDU case *\/$/;"	m	struct:_apdu_t
current	openpgp.h	/^    struct blob *       current;    \/* currently selected file *\/$/;"	m	struct:pgp_priv_data	typeref:struct:pgp_priv_data::blob
data	apdu.h	/^    unsigned char *data;        \/* S-APDU data *\/$/;"	m	struct:_apdu_t
data	common.h	/^    const u8 *data;     \/* PIN, if given by the appliction *\/$/;"	m	struct:sc_pin_cmd_pin
data	openpgp.h	/^    unsigned char * data;     $/;"	m	struct:blob
datalen	apdu.h	/^    size_t datalen;         \/* length of data in S-APDU *\/     $/;"	m	struct:_apdu_t
decode_bit_field	asn1.c	/^int decode_bit_field(const u8 * inbuf, size_t inlen, void *outbuf, size_t outlen)$/;"	f
decode_bit_string	asn1.c	/^int decode_bit_string(const u8 * inbuf, size_t inlen, void *outbuf,                                                                                                                                                             $/;"	f
detect_apdu_cse	apdu.c	/^void detect_apdu_cse(const card_t *card, apdu_t *apdu)$/;"	f
detect_reader_features	pcsc-wrapper.c	/^void detect_reader_features(sc_reader_t *reader, SCARDHANDLE card_handle) {$/;"	f
disconnect_action	pcsc-wrapper.h	/^    DWORD disconnect_action;$/;"	m	struct:pcsc_global_private_data
dlhandle	pcsc-wrapper.h	/^    void *dlhandle;$/;"	m	struct:pcsc_global_private_data
do_info	openpgp.h	/^struct do_info {$/;"	s
drv_data	card.h	/^    void *drv_data;           $/;"	m	struct:_card_t
drv_data	common.h	/^    void *drv_data;$/;"	m	struct:sc_reader
dump_hex	common.c	/^char* dump_hex(const u8 * in, size_t count)   $/;"	f
ef_structure	common.h	/^    unsigned int type, ef_structure, status; \/* See constant values defined above *\/$/;"	m	struct:sc_file
enable_pace	pcsc-wrapper.h	/^    int enable_pace;$/;"	m	struct:pcsc_global_private_data
enable_pinpad	pcsc-wrapper.h	/^    int enable_pinpad;$/;"	m	struct:pcsc_global_private_data
encoded_content	common.h	/^    unsigned char *encoded_content; \/* file's content encoded to be used in the file creation command *\/$/;"	m	struct:sc_file
encoded_content_len	common.h	/^    size_t encoded_content_len; \/* size of file's encoded content in bytes *\/$/;"	m	struct:sc_file
encoding	common.h	/^    unsigned int encoding;  \/* ASCII-numeric, BCD, etc *\/  $/;"	m	struct:sc_pin_cmd_pin
errorno	common.h	/^    int errorno;$/;"	m	struct:sc_card_error
errorstr	common.h	/^    const char *errorstr;     $/;"	m	struct:sc_card_error
exponent	common.h	/^            unsigned long exponent;$/;"	m	struct:sc_algorithm_info::__anon1::sc_rsa_info
ext_caps	openpgp.h	/^    enum _ext_caps      ext_caps;   \/* extended capabilities *\/$/;"	m	struct:pgp_priv_data	typeref:enum:pgp_priv_data::_ext_caps
ext_flags	common.h	/^            unsigned ext_flags;$/;"	m	struct:sc_algorithm_info::__anon1::sc_ec_info
f	common.h	/^        int Fi, f, Di, N;     $/;"	m	struct:sc_reader::_atr_info
file	openpgp.h	/^    sc_file_t * file;         $/;"	m	struct:blob
files	openpgp.h	/^    struct blob *   files;  \/* pointer to 1st child *\/                                                                                                                                                                                 $/;"	m	struct:blob	typeref:struct:blob::blob
flags	apdu.h	/^    unsigned long flags;      $/;"	m	struct:_apdu_t
flags	asn1.h	/^    unsigned int flags;$/;"	m	struct:sc_asn1_entry
flags	card.h	/^    unsigned long caps, flags;$/;"	m	struct:_card_t
flags	common.h	/^    unsigned int flags;$/;"	m	struct:sc_algorithm_info
flags	common.h	/^    unsigned int flags;$/;"	m	struct:sc_pin_cmd_data
flags	common.h	/^    unsigned long flags, capabilities;$/;"	m	struct:sc_reader
format_apdu	apdu.c	/^void format_apdu(card_t *card, apdu_t *apdu,$/;"	f
format_asn1_entry	asn1.c	/^void format_asn1_entry(struct sc_asn1_entry *entry, void *parm, void *arg, $/;"	f
fw_major	common.h	/^    unsigned char fw_major;$/;"	m	struct:sc_version
fw_minor	common.h	/^    unsigned char fw_minor;$/;"	m	struct:sc_version
get_fn	openpgp.h	/^    int     (*get_fn)(card_t *, unsigned int, u8 *, size_t);$/;"	m	struct:do_info
get_response	apdu.c	/^int get_response(card_t *card, apdu_t *apdu, size_t olen)$/;"	f
get_tlv_properties	pcsc-wrapper.h	/^    DWORD get_tlv_properties;$/;"	m	struct:pcsc_private_data
gpriv	pcsc-wrapper.h	/^    struct pcsc_global_private_data *gpriv;$/;"	m	struct:pcsc_private_data	typeref:struct:pcsc_private_data::pcsc_global_private_data
hex_dump	common.c	/^void hex_dump(const u8 * in, size_t count, char *buf, size_t len)$/;"	f
hex_to_bin	common.c	/^int hex_to_bin(const char *in, u8 *out, size_t *outlen)$/;"	f
hist_bytes	common.h	/^        u8 *hist_bytes;$/;"	m	struct:sc_reader::_atr_info
hist_bytes_len	common.h	/^        size_t hist_bytes_len;$/;"	m	struct:sc_reader::_atr_info
hw_major	common.h	/^    unsigned char hw_major;$/;"	m	struct:sc_version
hw_minor	common.h	/^    unsigned char hw_minor;$/;"	m	struct:sc_version
id	common.h	/^    int id;     \/* Short file id (2 bytes) *\/  $/;"	m	struct:sc_file
id	openpgp.h	/^    unsigned int    id;     \/* ID of the DO in question *\/$/;"	m	struct:do_info
id	openpgp.h	/^    unsigned int    id;$/;"	m	struct:blob
iin	common.h	/^    struct sc_iin iin;$/;"	m	struct:sc_serial_number	typeref:struct:sc_serial_number::sc_iin
index	common.h	/^    int index;$/;"	m	struct:sc_path
info	openpgp.h	/^    struct do_info *info;     $/;"	m	struct:blob	typeref:struct:blob::do_info
ins	apdu.h	/^    unsigned char cla, ins, p1, p2; \/* CLA, INS, P1 and P2 bytes *\/$/;"	m	struct:_apdu_t
iso7816_build_pin_apdu	iso7816.c	/^iso7816_build_pin_apdu(card_t *card, apdu_t *apdu,$/;"	f	file:
iso7816_check_sw	iso7816.c	/^int iso7816_check_sw(unsigned int sw1, unsigned int sw2)                                                                                                                                                             $/;"	f
iso7816_errors	iso7816.c	/^static const struct sc_card_error iso7816_errors[] = {$/;"	v	typeref:struct:sc_card_error	file:
iso7816_get_response	iso7816.c	/^int iso7816_get_response(card_t *card, size_t *count, u8 *buf)$/;"	f
iso7816_pin_cmd	iso7816.c	/^int iso7816_pin_cmd(card_t *card, struct sc_pin_cmd_data *data, int *tries_left)$/;"	f
iso7816_process_fci	iso7816.c	/^int iso7816_process_fci(card_t *card, struct sc_file *file,$/;"	f
iso7816_select_file	iso7816.c	/^int iso7816_select_file(card_t *card, const struct sc_path *in_path, struct sc_file **file_out)$/;"	f
issuer_id	common.h	/^    unsigned long issuer_id;        \/* issuer identifier *\/        $/;"	m	struct:sc_iin
key_length	common.h	/^    unsigned int key_length;$/;"	m	struct:sc_algorithm_info
key_ref	common.h	/^    unsigned int key_ref;   \/* SC_AC_KEY_REF_NONE or an integer *\/$/;"	m	struct:sc_acl_entry
lc	apdu.h	/^    size_t lc, le;          \/* Lc and Le bytes *\/$/;"	m	struct:_apdu_t
le	apdu.h	/^    size_t lc, le;          \/* Lc and Le bytes *\/$/;"	m	struct:_apdu_t
len	common.h	/^    int len;        \/* set to -1 to get pin from pin pad *\/$/;"	m	struct:sc_pin_cmd_pin
len	common.h	/^    size_t len;$/;"	m	struct:sc_aid
len	common.h	/^    size_t len;$/;"	m	struct:sc_atr
len	common.h	/^    size_t len;$/;"	m	struct:sc_path
len	common.h	/^    size_t len;$/;"	m	struct:sc_pkcs15_id
len	common.h	/^    size_t len;$/;"	m	struct:sc_serial_number
len	openpgp.h	/^    unsigned int    len;$/;"	m	struct:blob
length_offset	common.h	/^    size_t length_offset;   \/* Effective PIN length offset in the APDU *\/$/;"	m	struct:sc_pin_cmd_pin
mac	apdu.h	/^    unsigned char mac[8];     $/;"	m	struct:_apdu_t
mac_len	apdu.h	/^    size_t mac_len;$/;"	m	struct:_apdu_t
magic	common.h	/^    unsigned int magic;       $/;"	m	struct:sc_file
main	decipher.c	/^int main()$/;"	f
main	get_public_key.c	/^int main()$/;"	f
main	verify.c	/^int main()$/;"	f
max_cert_size	openpgp.h	/^    size_t          max_cert_size; $/;"	m	struct:pgp_priv_data
max_challenge_size	openpgp.h	/^    size_t          max_challenge_size;$/;"	m	struct:pgp_priv_data
max_length	common.h	/^    size_t max_length;        $/;"	m	struct:sc_pin_cmd_pin
max_pin_len	card.h	/^    int max_pin_len;$/;"	m	struct:_card_t
max_recv_size	card.h	/^    size_t max_recv_size; \/* Max Le supported by the card *\/$/;"	m	struct:_card_t
max_send_size	card.h	/^    size_t max_send_size; \/* Max Lc supported by the card *\/$/;"	m	struct:_card_t
max_tries	common.h	/^    int max_tries;  \/* Used for signaling back from SC_PIN_CMD_GET_INFO *\/$/;"	m	struct:sc_pin_cmd_pin
method	common.h	/^    unsigned int method;    \/* See SC_AC_* *\/$/;"	m	struct:sc_acl_entry
mf	openpgp.h	/^    struct blob *       mf;$/;"	m	struct:pgp_priv_data	typeref:struct:pgp_priv_data::blob
mii	common.h	/^    unsigned char mii;              \/* industry identifier *\/      $/;"	m	struct:sc_iin
min_length	common.h	/^    size_t min_length;  \/* min\/max length of PIN *\/$/;"	m	struct:sc_pin_cmd_pin
modify_ioctl	pcsc-wrapper.h	/^    DWORD modify_ioctl;$/;"	m	struct:pcsc_private_data
modify_ioctl_finish	pcsc-wrapper.h	/^    DWORD modify_ioctl_finish;$/;"	m	struct:pcsc_private_data
modify_ioctl_start	pcsc-wrapper.h	/^    DWORD modify_ioctl_start;$/;"	m	struct:pcsc_private_data
msleep	common.h	49;"	d
msleep	common.h	51;"	d
name	asn1.h	/^    const char *name;$/;"	m	struct:sc_asn1_entry
name	card.h	/^    const char *name;         $/;"	m	struct:_card_t
name	common.h	/^    char *name;$/;"	m	struct:sc_reader
name	common.h	/^    unsigned char name[16]; \/* DF name *\/$/;"	m	struct:sc_file
namelen	common.h	/^    size_t namelen; \/* length of DF name *\/$/;"	m	struct:sc_file
next	common.h	/^    struct sc_acl_entry *next;$/;"	m	struct:sc_acl_entry	typeref:struct:sc_acl_entry::sc_acl_entry
next	openpgp.h	/^    struct blob *   next;   \/* pointer to next sibling *\/$/;"	m	struct:blob	typeref:struct:blob::blob
next	pcsc-wrapper.h	/^    _reader_list_node* next;$/;"	m	struct:_reader_list_node
offset	common.h	/^    size_t offset;      \/* PIN offset in the APDU *\/   $/;"	m	struct:sc_pin_cmd_pin
opensc_proto_to_pcsc	pcsc-wrapper.c	/^static DWORD opensc_proto_to_pcsc(unsigned int proto)$/;"	f	file:
p1	apdu.h	/^    unsigned char cla, ins, p1, p2; \/* CLA, INS, P1 and P2 bytes *\/$/;"	m	struct:_apdu_t
p2	apdu.h	/^    unsigned char cla, ins, p1, p2; \/* CLA, INS, P1 and P2 bytes *\/$/;"	m	struct:_apdu_t
pace_ioctl	pcsc-wrapper.h	/^    DWORD pace_ioctl;$/;"	m	struct:pcsc_private_data
pad_char	common.h	/^    u8 pad_char;$/;"	m	struct:sc_pin_cmd_pin
pad_length	common.h	/^    size_t pad_length;  \/* filled in by the card driver *\/$/;"	m	struct:sc_pin_cmd_pin
parent	openpgp.h	/^    struct blob *   parent; \/* pointer to parent *\/$/;"	m	struct:blob	typeref:struct:blob::blob
parm	asn1.h	/^    void *parm;$/;"	m	struct:sc_asn1_entry
part10_build_verify_pin_block	pcsc-wrapper.c	/^static int part10_build_verify_pin_block(struct sc_reader *reader, u8 * buf, size_t * size, struct sc_pin_cmd_data *data)$/;"	f	file:
part10_check_pin_min_max	pcsc-wrapper.c	/^static int part10_check_pin_min_max(sc_reader_t *reader, struct sc_pin_cmd_data *data)                                                                                                                                                            $/;"	f	file:
part10_find_property_by_tag	pcsc-wrapper.c	/^part10_find_property_by_tag(unsigned char buffer[], int length,$/;"	f	file:
path	common.h	/^    struct sc_path path;      $/;"	m	struct:sc_file	typeref:struct:sc_file::sc_path
pcsc_card	pcsc-wrapper.h	/^    SCARDHANDLE pcsc_card;$/;"	m	struct:pcsc_private_data
pcsc_connect	pcsc-wrapper.c	/^int pcsc_connect(sc_reader_t *reader)                                                                                                                                                                                           $/;"	f
pcsc_ctx	pcsc-wrapper.h	/^    SCARDCONTEXT pcsc_ctx;$/;"	m	struct:pcsc_global_private_data
pcsc_detect_card_presence	pcsc-wrapper.c	/^int pcsc_detect_card_presence(sc_reader_t *reader)$/;"	f
pcsc_detect_readers	pcsc-wrapper.c	/^int pcsc_detect_readers(reader_list* readerList)$/;"	f
pcsc_disconnect	pcsc-wrapper.c	/^int pcsc_disconnect(sc_reader_t * reader)$/;"	f
pcsc_global_private_data	pcsc-wrapper.h	/^struct pcsc_global_private_data {  $/;"	s
pcsc_init	pcsc-wrapper.c	/^int pcsc_init(sc_reader_t* reader, SCARDCONTEXT cardctx)$/;"	f
pcsc_internal_transmit	pcsc-wrapper.c	/^int pcsc_internal_transmit(sc_reader_t *reader,$/;"	f
pcsc_pin_cmd	pcsc-wrapper.c	/^int pcsc_pin_cmd(sc_reader_t *reader, struct sc_pin_cmd_data *data)$/;"	f
pcsc_private_data	pcsc-wrapper.h	/^struct pcsc_private_data {$/;"	s
pcsc_proto_to_opensc	pcsc-wrapper.c	/^static unsigned int pcsc_proto_to_opensc(DWORD proto)$/;"	f	file:
pcsc_to_opensc_error	pcsc-wrapper.c	/^static int pcsc_to_opensc_error(LONG rv)$/;"	f	file:
pcsc_transmit	pcsc-wrapper.c	/^int pcsc_transmit(sc_reader_t *reader, apdu_t *apdu)$/;"	f
pcsc_wait_ctx	pcsc-wrapper.h	/^    SCARDCONTEXT pcsc_wait_ctx;    $/;"	m	struct:pcsc_global_private_data
pgp2_objects	openpgp.c	/^static struct do_info       pgp2_objects[] = {  \/* OpenPGP card spec 2.0 *\/$/;"	v	typeref:struct:do_info	file:
pgp_enumerate_blob	openpgp.c	/^static int pgp_enumerate_blob(card_t *card, struct blob *blob)$/;"	f	file:
pgp_finish	openpgp.c	/^int pgp_finish(card_t *card)$/;"	f
pgp_get_blob	openpgp.c	/^static int pgp_get_blob(card_t *card, struct blob *blob, unsigned int id, struct blob **ret)$/;"	f	file:
pgp_get_card_features	openpgp.c	/^pgp_get_card_features(card_t *card)$/;"	f	file:
pgp_get_data	openpgp.c	/^pgp_get_data(sc_card_t *card, unsigned int tag, u8 *buf, size_t buf_len)                                                                                                                         $/;"	f	file:
pgp_init	openpgp.c	/^int pgp_init(card_t *card)$/;"	f
pgp_new_blob	openpgp.c	/^pgp_new_blob(card_t *card, struct blob *parent, unsigned int file_id,$/;"	f	file:
pgp_pin_cmd	openpgp.c	/^int pgp_pin_cmd(card_t *card, struct sc_pin_cmd_data *data, int *tries_left)                                                                                                                                                            $/;"	f
pgp_priv_data	openpgp.h	/^struct pgp_priv_data {$/;"	s
pgp_read_blob	openpgp.c	/^static int pgp_read_blob(card_t *card, struct blob *blob)$/;"	f	file:
pgp_set_blob	openpgp.c	/^pgp_set_blob(struct blob *blob, const u8 *data, size_t len)$/;"	f	file:
pin1	common.h	/^    struct sc_pin_cmd_pin pin1, pin2;$/;"	m	struct:sc_pin_cmd_data	typeref:struct:sc_pin_cmd_data::sc_pin_cmd_pin
pin2	common.h	/^    struct sc_pin_cmd_pin pin1, pin2;$/;"	m	struct:sc_pin_cmd_data	typeref:struct:sc_pin_cmd_data::
pin_properties_ioctl	pcsc-wrapper.h	/^    DWORD pin_properties_ioctl;                                                                                                                                                                                                        $/;"	m	struct:pcsc_private_data
pin_reference	common.h	/^    int pin_reference;$/;"	m	struct:sc_pin_cmd_data
pin_type	common.h	/^    unsigned int pin_type;      \/* usually SC_AC_CHV *\/$/;"	m	struct:sc_pin_cmd_data
prompt	common.h	/^    const char *prompt; \/* Prompt to display *\/$/;"	m	struct:sc_pin_cmd_pin
prop_attr	common.h	/^    unsigned char *prop_attr;   \/* proprietary information. tag '85'*\/$/;"	m	struct:sc_file
prop_attr_len	common.h	/^    size_t prop_attr_len;     $/;"	m	struct:sc_file
provider_library	pcsc-wrapper.h	/^    const char *provider_library;  $/;"	m	struct:pcsc_global_private_data
put_fn	openpgp.h	/^    int     (*put_fn)(card_t *, unsigned int, const u8 *, size_t);$/;"	m	struct:do_info
reader	card.h	/^    struct sc_reader *reader;$/;"	m	struct:_card_t	typeref:struct:_card_t::sc_reader
reader	pcsc-wrapper.h	/^    sc_reader_t* reader;$/;"	m	struct:_reader_list_node
readerNum	pcsc-wrapper.h	/^    unsigned int readerNum;$/;"	m	struct:_reader_list
reader_list	pcsc-wrapper.h	/^} reader_list;$/;"	t	typeref:struct:_reader_list
reader_list_node	pcsc-wrapper.h	/^}reader_list_node;$/;"	t	typeref:struct:_reader_list_node
reader_state	pcsc-wrapper.h	/^    SCARD_READERSTATE reader_state;$/;"	m	struct:pcsc_private_data
reconnect_action	pcsc-wrapper.h	/^    DWORD reconnect_action;$/;"	m	struct:pcsc_global_private_data
record_count	common.h	/^    int record_count;  \/* Valid, if not transparent EF or DF *\/$/;"	m	struct:sc_file
record_length	common.h	/^    int record_length; \/* In case of fixed-length or cyclic EF *\/$/;"	m	struct:sc_file
refresh_attributes	pcsc-wrapper.c	/^int refresh_attributes(sc_reader_t *reader)$/;"	f
refs	common.h	/^    unsigned refs[8];   \/* Security Object References *\/$/;"	m	struct:sc_crt
resp	apdu.h	/^    unsigned char *resp;        \/* R-APDU data buffer *\/   $/;"	m	struct:_apdu_t
resplen	apdu.h	/^    size_t resplen;         \/* in: size of R-APDU buffer,$/;"	m	struct:_apdu_t
root	pcsc-wrapper.h	/^    reader_list_node* root;$/;"	m	struct:_reader_list
sc_acl_entry	common.h	/^typedef struct sc_acl_entry {$/;"	s
sc_acl_entry_t	common.h	/^} sc_acl_entry_t;$/;"	t	typeref:struct:sc_acl_entry
sc_aid	common.h	/^struct sc_aid {$/;"	s
sc_algorithm_info	common.h	/^typedef struct sc_algorithm_info {$/;"	s
sc_algorithm_info_t	common.h	/^} sc_algorithm_info_t;$/;"	t	typeref:struct:sc_algorithm_info
sc_apdu2bytes	apdu.c	/^int sc_apdu2bytes(const apdu_t *apdu,$/;"	f
sc_apdu_get_length	apdu.c	/^size_t sc_apdu_get_length(const apdu_t *apdu, unsigned int proto)$/;"	f
sc_apdu_log	apdu.c	/^void sc_apdu_log(int level, const u8 *data, size_t len, int is_out)$/;"	f
sc_apdu_set_resp	apdu.c	/^int sc_apdu_set_resp(apdu_t *apdu, const u8 *buf,$/;"	f
sc_asn1_decode_integer	asn1.c	/^int sc_asn1_decode_integer(const u8 * inbuf, size_t inlen, int *out) $/;"	f
sc_asn1_decode_object_id	asn1.c	/^int sc_asn1_decode_object_id(const u8 *inbuf, size_t inlen, struct sc_object_id *id)$/;"	f
sc_asn1_decode_utf8string	asn1.c	/^int sc_asn1_decode_utf8string(const u8 *inbuf, size_t inlen,$/;"	f
sc_asn1_entry	asn1.h	/^struct sc_asn1_entry {$/;"	s
sc_asn1_find_tag	common.c	/^const u8 *sc_asn1_find_tag( const u8 * buf, size_t buflen, $/;"	f
sc_asn1_read_tag	common.c	/^int sc_asn1_read_tag(const u8 ** buf, size_t buflen, unsigned int *cla_out,$/;"	f
sc_atr	common.h	/^struct sc_atr {$/;"	s
sc_build_pin	common.c	/^int sc_build_pin(u8 *buf, size_t buflen, struct sc_pin_cmd_pin *pin, int pad)                                                                                                                                                          $/;"	f
sc_card_error	common.h	/^struct sc_card_error {$/;"	s
sc_card_free	card.c	/^static void sc_card_free(card_t *card)                                                                                                                                                                                              $/;"	f	file:
sc_card_new	card.c	/^static card_t * sc_card_new()$/;"	f	file:
sc_connect_card	card.c	/^int sc_connect_card(sc_reader_t *reader, card_t **card_out)                                                                                                                                                                         $/;"	f
sc_crt	common.h	/^struct sc_crt {$/;"	s
sc_ec_info	common.h	/^        struct sc_ec_info {   $/;"	s	union:sc_algorithm_info::__anon1
sc_file	common.h	/^typedef struct sc_file {$/;"	s
sc_file_clear_acl_entries	common.c	/^void sc_file_clear_acl_entries(sc_file_t *file, unsigned int operation) $/;"	f
sc_file_free	common.c	/^void sc_file_free(sc_file_t *file)     $/;"	f
sc_file_new	common.c	/^sc_file_t * sc_file_new(void) $/;"	f
sc_file_set_prop_attr	common.c	/^int sc_file_set_prop_attr(sc_file_t *file, const u8 *prop_attr,$/;"	f
sc_file_set_sec_attr	common.c	/^int sc_file_set_sec_attr(sc_file_t *file, const u8 *sec_attr,$/;"	f
sc_file_t	common.h	/^} sc_file_t;$/;"	t	typeref:struct:sc_file
sc_file_valid	common.c	/^int sc_file_valid(const sc_file_t *file) {$/;"	f
sc_format_path	common.c	/^void sc_format_path(const char *str, sc_path_t *path)$/;"	f
sc_iin	common.h	/^struct sc_iin {$/;"	s
sc_init_oid	common.c	/^void sc_init_oid(struct sc_object_id *oid)$/;"	f
sc_mem_clear	common.c	/^void sc_mem_clear(void *ptr, size_t len)$/;"	f
sc_object_id	common.h	/^struct sc_object_id {$/;"	s
sc_path	common.h	/^typedef struct sc_path {$/;"	s
sc_path_t	common.h	/^} sc_path_t;$/;"	t	typeref:struct:sc_path
sc_pin_cmd_data	common.h	/^struct sc_pin_cmd_data {$/;"	s
sc_pin_cmd_pin	common.h	/^struct sc_pin_cmd_pin {$/;"	s
sc_pkcs15_id	common.h	/^struct sc_pkcs15_id {$/;"	s
sc_pkcs15_id_t	common.h	/^typedef struct sc_pkcs15_id sc_pkcs15_id_t;$/;"	t	typeref:struct:sc_pkcs15_id
sc_reader	common.h	/^typedef struct sc_reader {$/;"	s
sc_reader_t	common.h	/^} sc_reader_t;$/;"	t	typeref:struct:sc_reader
sc_rsa_info	common.h	/^        struct sc_rsa_info {$/;"	s	union:sc_algorithm_info::__anon1
sc_serial_number	common.h	/^typedef struct sc_serial_number {$/;"	s
sc_serial_number_t	common.h	/^} sc_serial_number_t; $/;"	t	typeref:struct:sc_serial_number
sc_strerror	errors.c	/^const char *sc_strerror(int error)$/;"	f
sc_version	common.h	/^struct sc_version {$/;"	s
sec_attr	common.h	/^    unsigned char *sec_attr;    \/* security data in proprietary format. tag '86' *\/$/;"	m	struct:sc_file
sec_attr_len	common.h	/^    size_t sec_attr_len;$/;"	m	struct:sc_file
serialnr	card.h	/^    struct sc_serial_number serialnr;$/;"	m	struct:_card_t	typeref:struct:_card_t::sc_serial_number
set_le_and_transmit	apdu.c	/^int set_le_and_transmit(card_t *card, apdu_t *apdu, size_t olen)$/;"	f
shareable	common.h	/^    unsigned int shareable;                  \/* true(1), false(0) according to ISO 7816-4:2005 Table 14 *\/$/;"	m	struct:sc_file
single_transmit	apdu.c	/^int single_transmit(card_t *card, apdu_t *apdu)$/;"	f
size	common.h	/^    size_t size;    \/* Size of file (in bytes) *\/  $/;"	m	struct:sc_file
sleep	common.h	52;"	d
sm_single_transmit	apdu.c	/^int sm_single_transmit(card_t *card, apdu_t *apdu)$/;"	f
sm_update_apdu_response	apdu.c	/^int sm_update_apdu_response(card_t *card, unsigned char *resp_data, size_t resp_len,$/;"	f
state	openpgp.h	/^    enum _card_state    state;      \/* card state *\/   $/;"	m	struct:pgp_priv_data	typeref:enum:pgp_priv_data::_card_state
status	common.h	/^    unsigned int type, ef_structure, status; \/* See constant values defined above *\/$/;"	m	struct:sc_file
status	openpgp.h	/^    int     status;           $/;"	m	struct:blob
supported_protocols	common.h	/^    unsigned int supported_protocols, active_protocol;$/;"	m	struct:sc_reader
sw1	apdu.h	/^    unsigned int sw1, sw2;      \/* Status words returned in R-APDU *\/$/;"	m	struct:_apdu_t
sw2	apdu.h	/^    unsigned int sw1, sw2;      \/* Status words returned in R-APDU *\/$/;"	m	struct:_apdu_t
tag	asn1.h	/^    unsigned int tag;$/;"	m	struct:sc_asn1_entry
tag	common.h	/^    unsigned tag;$/;"	m	struct:sc_crt
transaction_end_action	pcsc-wrapper.h	/^    DWORD transaction_end_action;  $/;"	m	struct:pcsc_global_private_data
transmit	apdu.c	/^int transmit(card_t *card, apdu_t *apdu)$/;"	f
transmit_apdu	apdu.c	/^int transmit_apdu(card_t *card, apdu_t *apdu)                                                                                                                                                                                 $/;"	f
tries_left	common.h	/^    int tries_left; \/* Used for signaling back from SC_PIN_CMD_GET_INFO *\/$/;"	m	struct:sc_pin_cmd_pin
type	asn1.h	/^    unsigned int type;$/;"	m	struct:sc_asn1_entry
type	common.h	/^    int type;$/;"	m	struct:sc_path
type	common.h	/^    unsigned int type, ef_structure, status; \/* See constant values defined above *\/$/;"	m	struct:sc_file
type	openpgp.h	/^    enum _type  type;       \/* constructed DO or not *\/$/;"	m	struct:do_info	typeref:enum:do_info::_type
type_attr	common.h	/^    unsigned char *type_attr;   \/* file descriptor data. tag '82'.$/;"	m	struct:sc_file
type_attr_len	common.h	/^    size_t type_attr_len;$/;"	m	struct:sc_file
u	common.h	/^    } u;$/;"	m	struct:sc_algorithm_info	typeref:union:sc_algorithm_info::__anon1
u8	common.h	/^typedef unsigned char u8;$/;"	t
usage	common.h	/^    unsigned usage;     \/* Usage Qualifier Byte *\/$/;"	m	struct:sc_crt
ushort2bebytes	apdu.c	/^u8* ushort2bebytes(u8 *buf, unsigned short x)$/;"	f
value	common.h	/^    int value[SC_MAX_OBJECT_ID_OCTETS];$/;"	m	struct:sc_object_id
value	common.h	/^    u8 value[SC_MAX_PATH_SIZE];$/;"	m	struct:sc_path
value	common.h	/^    u8 value[SC_PKCS15_MAX_ID_SIZE];$/;"	m	struct:sc_pkcs15_id
value	common.h	/^    unsigned char value[SC_MAX_AID_SIZE];$/;"	m	struct:sc_aid
value	common.h	/^    unsigned char value[SC_MAX_ATR_SIZE]; $/;"	m	struct:sc_atr
value	common.h	/^    unsigned char value[SC_MAX_SERIALNR];$/;"	m	struct:sc_serial_number
verify_ioctl	pcsc-wrapper.h	/^    DWORD verify_ioctl;$/;"	m	struct:pcsc_private_data
verify_ioctl_finish	pcsc-wrapper.h	/^    DWORD verify_ioctl_finish;$/;"	m	struct:pcsc_private_data
verify_ioctl_start	pcsc-wrapper.h	/^    DWORD verify_ioctl_start;$/;"	m	struct:pcsc_private_data
version	card.h	/^    struct sc_version version;$/;"	m	struct:_card_t	typeref:struct:_card_t::sc_version
